# coding: utf-8

"""
    Controller APIs

    APIs to act on Nextensio Controller  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@nextensio.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_admin_group(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """add an admin groups to a tenant  # noqa: E501

        allows an user to add an admin groups to a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_admin_group(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_admin_group_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_admin_group_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
            return data

    def add_admin_group_with_http_info(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """add an admin groups to a tenant  # noqa: E501

        allows an user to add an admin groups to a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_admin_group_with_http_info(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_admin_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_admin_group`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_admin_group`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `add_admin_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/admgroups/{group}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_attr_set(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """define a new attribute  # noqa: E501

        allows any admin to add a new attribute. The attribute can be for a user, an App, or an AppGroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attr_set(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttrSetStruct body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_attr_set_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_attr_set_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_attr_set_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """define a new attribute  # noqa: E501

        allows any admin to add a new attribute. The attribute can be for a user, an App, or an AppGroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attr_set_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttrSetStruct body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_attr_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_attr_set`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_attr_set`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_attr_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/attrset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_bundle(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """Add bundle.  # noqa: E501

        Add bundle to the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bundle(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BundleStruct body: provide tenant info (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_bundle_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bundle_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_bundle_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """Add bundle.  # noqa: E501

        Add bundle to the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bundle_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BundleStruct body: provide tenant info (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_bundle`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_bundle`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/bundle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_bundle_attr(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant bundle attrs  # noqa: E501

        Add attributes to the bundle of a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bundle_attr(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide bundle attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_bundle_attr_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bundle_attr_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_bundle_attr_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant bundle attrs  # noqa: E501

        Add attributes to the bundle of a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bundle_attr_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide bundle attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bundle_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_bundle_attr`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_bundle_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_bundle_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/bundleattr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_certs(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add certificate  # noqa: E501

        allows a user to add a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_certs(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertStruct body: provide info about certificate (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_certs_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_certs_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def add_certs_with_http_info(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add certificate  # noqa: E501

        allows a user to add a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_certs_with_http_info(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertStruct body: provide info about certificate (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_certs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_certs`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_certs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/add/cert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_clientid(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """Add a new clientID for a new nextensio App  # noqa: E501

        Add new clientID for new nextensio App  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_clientid(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClientID body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_clientid_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_clientid_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def add_clientid_with_http_info(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """Add a new clientID for a new nextensio App  # noqa: E501

        Add new clientID for new nextensio App  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_clientid_with_http_info(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClientID body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_clientid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_clientid`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_clientid`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/add/clientid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_cluster_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add gateway cluster to tenant  # noqa: E501

        add gateway cluster to tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantCluster body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cluster_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cluster_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_cluster_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add gateway cluster to tenant  # noqa: E501

        add gateway cluster to tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantCluster body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cluster_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_cluster_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_cluster_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_cluster_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tenantcluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_gateway(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add a gateway  # noqa: E501

        allows a user to add a new gateway or update an existing one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_gateway(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GatewayStruct body: provide info about gateway (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_gateway_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_gateway_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def add_gateway_with_http_info(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add a gateway  # noqa: E501

        allows a user to add a new gateway or update an existing one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_gateway_with_http_info(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GatewayStruct body: provide info about gateway (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_gateway`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/add/gateway', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_host_attr(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant host attrs  # noqa: E501

        Add attributes to the host in a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_attr(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide host attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_host_attr_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_host_attr_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_host_attr_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant host attrs  # noqa: E501

        Add attributes to the host in a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_attr_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide host attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_host_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_host_attr`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_host_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_host_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/hostattr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_idp_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add identity provider to tenant  # noqa: E501

        add identity provider to tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_idp_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddIDP body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_idp_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_idp_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_idp_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add identity provider to tenant  # noqa: E501

        add identity provider to tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_idp_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddIDP body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_idp_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_idp_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_idp_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_idp_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/idp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_keep_alive(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """Send keepalive from device to controller  # noqa: E501

        Send keepalive from user device to nextensio controller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_keep_alive(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeepaliveReq body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_keep_alive_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_keep_alive_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def add_keep_alive_with_http_info(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """Send keepalive from device to controller  # noqa: E501

        Send keepalive from user device to nextensio controller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_keep_alive_with_http_info(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeepaliveReq body: provide details of attribute to be added (required)
        :param str x_nextensio_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_keep_alive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_keep_alive`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_keep_alive`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/add/keepaliverequest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_mgd_tenant(self, x_nextensio_group, tenant_id, mgdtenant, **kwargs):  # noqa: E501
        """assign a managed tenant to a MSP tenant  # noqa: E501

        allows a superadmin to assign a managed tenant to a MSP tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mgd_tenant(x_nextensio_group, tenant_id, mgdtenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str mgdtenant: provide ID of a managed tenant (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, **kwargs)  # noqa: E501
        else:
            (data) = self.add_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, **kwargs)  # noqa: E501
            return data

    def add_mgd_tenant_with_http_info(self, x_nextensio_group, tenant_id, mgdtenant, **kwargs):  # noqa: E501
        """assign a managed tenant to a MSP tenant  # noqa: E501

        allows a superadmin to assign a managed tenant to a MSP tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str mgdtenant: provide ID of a managed tenant (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'mgdtenant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_mgd_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_mgd_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_mgd_tenant`")  # noqa: E501
        # verify the required parameter 'mgdtenant' is set
        if ('mgdtenant' not in params or
                params['mgdtenant'] is None):
            raise ValueError("Missing the required parameter `mgdtenant` when calling `add_mgd_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'mgdtenant' in params:
            path_params['mgdtenant'] = params['mgdtenant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tenantmsp/{mgdtenant}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_policy_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add policy  # noqa: E501

        add policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_policy_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPolicy body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_policy_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_policy_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_policy_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add policy  # noqa: E501

        add policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_policy_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPolicy body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_policy_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_policy_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_policy_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_policy_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_stats_rule_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add stats rule  # noqa: E501

        add stats rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_stats_rule_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatsRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_stats_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_stats_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_stats_rule_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add stats rule  # noqa: E501

        add stats rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_stats_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatsRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_stats_rule_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_stats_rule_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_stats_rule_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_stats_rule_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/statsrule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tenant(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add basic info for a tenant  # noqa: E501

        allows a superuser or an MSP to add a new tenant or update an existing one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tenant(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantUpdate body: provide info about tenant (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tenant_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tenant_with_http_info(body, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def add_tenant_with_http_info(self, body, x_nextensio_group, **kwargs):  # noqa: E501
        """add basic info for a tenant  # noqa: E501

        allows a superuser or an MSP to add a new tenant or update an existing one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tenant_with_http_info(body, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantUpdate body: provide info about tenant (required)
        :param str x_nextensio_group: (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_tenant`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/add/tenant', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_trace_req(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add trace request  # noqa: E501

        add trace request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trace_req(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: need "traceid" as a mandatory key (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_trace_req_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_trace_req_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_trace_req_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add trace request  # noqa: E501

        add trace request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trace_req_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: need "traceid" as a mandatory key (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trace_req" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_trace_req`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_trace_req`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_trace_req`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tracereq', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_trace_rule_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add trace rule  # noqa: E501

        add trace rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trace_rule_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TraceRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_trace_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_trace_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_trace_rule_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add trace rule  # noqa: E501

        add trace rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trace_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TraceRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trace_rule_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_trace_rule_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_trace_rule_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_trace_rule_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tracereqrule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add user  # noqa: E501

        allows an admin to add a user to the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAdd body: provide info about user (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_user_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add user  # noqa: E501

        allows an admin to add a user to the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAdd body: provide info about user (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_user`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_attr(self, body, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """add tenant user attrs  # noqa: E501

        Add attributes to the user of a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_attr(body, x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide user attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide User ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_attr_with_http_info(body, x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_attr_with_http_info(body, x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def add_user_attr_with_http_info(self, body, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """add tenant user attrs  # noqa: E501

        Add attributes to the user of a tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_attr_with_http_info(body, x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: provide user attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide User ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_attr`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_user_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_user_attr`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `add_user_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/userattr/single/{userid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_attr_multiple(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant user attrs for multiple users  # noqa: E501

        add tenant user attrs for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_attr_multiple(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: provide user attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_attr_multiple_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_attr_multiple_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_user_attr_multiple_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add tenant user attrs for multiple users  # noqa: E501

        add tenant user attrs for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_attr_multiple_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: provide user attributes to be added/updated (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_attr_multiple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_attr_multiple`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_user_attr_multiple`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_user_attr_multiple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/userattr/multiple', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_key(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add API key  # noqa: E501

        add API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_key(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserKey body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_key_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_key_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def add_user_key_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add API key  # noqa: E501

        add API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_key_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserKey body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_key`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `add_user_key`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `add_user_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/userkey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addbundle_rule_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add bundle rule  # noqa: E501

        add bundle rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addbundle_rule_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BundleRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addbundle_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addbundle_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def addbundle_rule_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add bundle rule  # noqa: E501

        add bundle rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addbundle_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BundleRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addbundle_rule_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `addbundle_rule_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `addbundle_rule_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `addbundle_rule_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/bundlerule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addhost_rule_handler(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add host rule  # noqa: E501

        add host rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addhost_rule_handler(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addhost_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addhost_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def addhost_rule_handler_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add host rule  # noqa: E501

        add host rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addhost_rule_handler_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostRule body: (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addhost_rule_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `addhost_rule_handler`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `addhost_rule_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `addhost_rule_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/hostrule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_admin_group(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """delete an admin group from a tenant  # noqa: E501

        allows an user to delete an admin group from a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_admin_group(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_admin_group_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.del_admin_group_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
            return data

    def del_admin_group_with_http_info(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """delete an admin group from a tenant  # noqa: E501

        allows an user to delete an admin group from a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_admin_group_with_http_info(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_admin_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_admin_group`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_admin_group`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `del_admin_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/admgroups/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_attr_set(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """delete an existing attribute  # noqa: E501

        allows any admin to delete an existing attribute. The attribute can be for a user, an App, or an AppGroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_attr_set(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttrSetStruct body: provide details of attribute to be deleted (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_attr_set_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.del_attr_set_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def del_attr_set_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """delete an existing attribute  # noqa: E501

        allows any admin to delete an existing attribute. The attribute can be for a user, an App, or an AppGroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_attr_set_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttrSetStruct body: provide details of attribute to be deleted (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_attr_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `del_attr_set`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_attr_set`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_attr_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/attrset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_bundle(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """del bundle from the tenant  # noqa: E501

        Delete the bundle from the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_bundle(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :param str bid: provie bundle ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_bundle_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
        else:
            (data) = self.del_bundle_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
            return data

    def del_bundle_with_http_info(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """del bundle from the tenant  # noqa: E501

        Delete the bundle from the specified tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_bundle_with_http_info(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :param str bid: provie bundle ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_bundle`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_bundle`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `del_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/bundle/{bid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_bundle_rule(self, x_nextensio_group, tenant_id, bid, rid, group, **kwargs):  # noqa: E501
        """delete bundle rule  # noqa: E501

        delete bundle rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_bundle_rule(x_nextensio_group, tenant_id, bid, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: bundle id (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_bundle_rule_with_http_info(x_nextensio_group, tenant_id, bid, rid, group, **kwargs)  # noqa: E501
        else:
            (data) = self.del_bundle_rule_with_http_info(x_nextensio_group, tenant_id, bid, rid, group, **kwargs)  # noqa: E501
            return data

    def del_bundle_rule_with_http_info(self, x_nextensio_group, tenant_id, bid, rid, group, **kwargs):  # noqa: E501
        """delete bundle rule  # noqa: E501

        delete bundle rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_bundle_rule_with_http_info(x_nextensio_group, tenant_id, bid, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: bundle id (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid', 'rid', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_bundle_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_bundle_rule`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_bundle_rule`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `del_bundle_rule`")  # noqa: E501
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `del_bundle_rule`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `del_bundle_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/bundlerule/{bid}/{rid}/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_cert(self, x_nextensio_group, certid, **kwargs):  # noqa: E501
        """delete a certificate  # noqa: E501

        allows a user to delete a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_cert(x_nextensio_group, certid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str certid: Certificate ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_cert_with_http_info(x_nextensio_group, certid, **kwargs)  # noqa: E501
        else:
            (data) = self.del_cert_with_http_info(x_nextensio_group, certid, **kwargs)  # noqa: E501
            return data

    def del_cert_with_http_info(self, x_nextensio_group, certid, **kwargs):  # noqa: E501
        """delete a certificate  # noqa: E501

        allows a user to delete a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_cert_with_http_info(x_nextensio_group, certid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str certid: Certificate ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'certid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_cert`")  # noqa: E501
        # verify the required parameter 'certid' is set
        if ('certid' not in params or
                params['certid'] is None):
            raise ValueError("Missing the required parameter `certid` when calling `del_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certid' in params:
            path_params['certid'] = params['certid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/del/cert/{certid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_gateway(self, x_nextensio_group, name, **kwargs):  # noqa: E501
        """delete an unused nextensio gateway  # noqa: E501

        allows a nextensio admin to delete a an unused Nextensio Gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_gateway(x_nextensio_group, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str name: Gateway name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_gateway_with_http_info(x_nextensio_group, name, **kwargs)  # noqa: E501
        else:
            (data) = self.del_gateway_with_http_info(x_nextensio_group, name, **kwargs)  # noqa: E501
            return data

    def del_gateway_with_http_info(self, x_nextensio_group, name, **kwargs):  # noqa: E501
        """delete an unused nextensio gateway  # noqa: E501

        allows a nextensio admin to delete a an unused Nextensio Gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_gateway_with_http_info(x_nextensio_group, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str name: Gateway name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_gateway`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `del_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/del/gateway/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_host_attr(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """delete host attrs  # noqa: E501

        Delete host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_host_attr(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: provide host name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_host_attr_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
        else:
            (data) = self.del_host_attr_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
            return data

    def del_host_attr_with_http_info(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """delete host attrs  # noqa: E501

        Delete host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_host_attr_with_http_info(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: provide host name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_host_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_host_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_host_attr`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `del_host_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/hostattr/{host}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_host_rule(self, x_nextensio_group, tenant_id, host, rid, group, **kwargs):  # noqa: E501
        """delete host rule  # noqa: E501

        delete host rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_host_rule(x_nextensio_group, tenant_id, host, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: host id (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_host_rule_with_http_info(x_nextensio_group, tenant_id, host, rid, group, **kwargs)  # noqa: E501
        else:
            (data) = self.del_host_rule_with_http_info(x_nextensio_group, tenant_id, host, rid, group, **kwargs)  # noqa: E501
            return data

    def del_host_rule_with_http_info(self, x_nextensio_group, tenant_id, host, rid, group, **kwargs):  # noqa: E501
        """delete host rule  # noqa: E501

        delete host rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_host_rule_with_http_info(x_nextensio_group, tenant_id, host, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: host id (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'host', 'rid', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_host_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_host_rule`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_host_rule`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `del_host_rule`")  # noqa: E501
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `del_host_rule`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `del_host_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/hostrule/{host}/{rid}/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_idp_handler(self, x_nextensio_group, tenant_id, idp, **kwargs):  # noqa: E501
        """delete an IDP  # noqa: E501

        delete a tenant's IDP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_idp_handler(x_nextensio_group, tenant_id, idp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str idp: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_idp_handler_with_http_info(x_nextensio_group, tenant_id, idp, **kwargs)  # noqa: E501
        else:
            (data) = self.del_idp_handler_with_http_info(x_nextensio_group, tenant_id, idp, **kwargs)  # noqa: E501
            return data

    def del_idp_handler_with_http_info(self, x_nextensio_group, tenant_id, idp, **kwargs):  # noqa: E501
        """delete an IDP  # noqa: E501

        delete a tenant's IDP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_idp_handler_with_http_info(x_nextensio_group, tenant_id, idp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str idp: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'idp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_idp_handler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_idp_handler`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_idp_handler`")  # noqa: E501
        # verify the required parameter 'idp' is set
        if ('idp' not in params or
                params['idp'] is None):
            raise ValueError("Missing the required parameter `idp` when calling `del_idp_handler`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'idp' in params:
            path_params['idp'] = params['idp']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/idp/{idp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_mgd_tenant(self, x_nextensio_group, tenant_id, mgdtenant, **kwargs):  # noqa: E501
        """remove a managed tenant from a MSP tenant  # noqa: E501

        allows a superadmin to delete a managed tenant from a MSP tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_mgd_tenant(x_nextensio_group, tenant_id, mgdtenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str mgdtenant: provide ID of a managed tenant (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, **kwargs)  # noqa: E501
        else:
            (data) = self.del_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, **kwargs)  # noqa: E501
            return data

    def del_mgd_tenant_with_http_info(self, x_nextensio_group, tenant_id, mgdtenant, **kwargs):  # noqa: E501
        """remove a managed tenant from a MSP tenant  # noqa: E501

        allows a superadmin to delete a managed tenant from a MSP tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_mgd_tenant_with_http_info(x_nextensio_group, tenant_id, mgdtenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str mgdtenant: provide ID of a managed tenant (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'mgdtenant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_mgd_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_mgd_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_mgd_tenant`")  # noqa: E501
        # verify the required parameter 'mgdtenant' is set
        if ('mgdtenant' not in params or
                params['mgdtenant'] is None):
            raise ValueError("Missing the required parameter `mgdtenant` when calling `del_mgd_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'mgdtenant' in params:
            path_params['mgdtenant'] = params['mgdtenant']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/tenantmsp/{mgdtenant}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_onboard_logs(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """delete onboard logs for a particluar user  # noqa: E501

        delete onboard logs for a particluar user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_onboard_logs(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: user id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_onboard_logs_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.del_onboard_logs_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def del_onboard_logs_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """delete onboard logs for a particluar user  # noqa: E501

        delete onboard logs for a particluar user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_onboard_logs_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: user id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_onboard_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_onboard_logs`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_onboard_logs`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `del_onboard_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/onboardlog/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_policy(self, x_nextensio_group, tenant_id, policyid, **kwargs):  # noqa: E501
        """delete policy  # noqa: E501

        delete policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_policy(x_nextensio_group, tenant_id, policyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str policyid: policy id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_policy_with_http_info(x_nextensio_group, tenant_id, policyid, **kwargs)  # noqa: E501
        else:
            (data) = self.del_policy_with_http_info(x_nextensio_group, tenant_id, policyid, **kwargs)  # noqa: E501
            return data

    def del_policy_with_http_info(self, x_nextensio_group, tenant_id, policyid, **kwargs):  # noqa: E501
        """delete policy  # noqa: E501

        delete policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_policy_with_http_info(x_nextensio_group, tenant_id, policyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str policyid: policy id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'policyid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_policy`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_policy`")  # noqa: E501
        # verify the required parameter 'policyid' is set
        if ('policyid' not in params or
                params['policyid'] is None):
            raise ValueError("Missing the required parameter `policyid` when calling `del_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'policyid' in params:
            path_params['policyid'] = params['policyid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/policy/{policyid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_stats_rule(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """delete stats rule  # noqa: E501

        delete stats rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_stats_rule(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_stats_rule_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.del_stats_rule_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
            return data

    def del_stats_rule_with_http_info(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """delete stats rule  # noqa: E501

        delete stats rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_stats_rule_with_http_info(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_stats_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_stats_rule`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_stats_rule`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `del_stats_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/statsrule/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_tenant(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """delete a tenant  # noqa: E501

        allows a user to delete an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_tenant(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_tenant_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.del_tenant_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def del_tenant_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """delete a tenant  # noqa: E501

        allows a user to delete an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_tenant_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/del/tenant/{tenant-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_tenant_cluster(self, x_nextensio_group, tenant_id, gateway, **kwargs):  # noqa: E501
        """delete host attrs  # noqa: E501

        Delete tenant cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_tenant_cluster(x_nextensio_group, tenant_id, gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str gateway: gateway name like gatewaydosfo3.nextensio.net (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, **kwargs)  # noqa: E501
        else:
            (data) = self.del_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, **kwargs)  # noqa: E501
            return data

    def del_tenant_cluster_with_http_info(self, x_nextensio_group, tenant_id, gateway, **kwargs):  # noqa: E501
        """delete host attrs  # noqa: E501

        Delete tenant cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str gateway: gateway name like gatewaydosfo3.nextensio.net (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'gateway']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_tenant_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_tenant_cluster`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_tenant_cluster`")  # noqa: E501
        # verify the required parameter 'gateway' is set
        if ('gateway' not in params or
                params['gateway'] is None):
            raise ValueError("Missing the required parameter `gateway` when calling `del_tenant_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'gateway' in params:
            path_params['gateway'] = params['gateway']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/tenantcluster/{gateway}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_trace_req(self, x_nextensio_group, tenant_id, rid, group, **kwargs):  # noqa: E501
        """delete trace request  # noqa: E501

        delete trace request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_trace_req(x_nextensio_group, tenant_id, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_trace_req_with_http_info(x_nextensio_group, tenant_id, rid, group, **kwargs)  # noqa: E501
        else:
            (data) = self.del_trace_req_with_http_info(x_nextensio_group, tenant_id, rid, group, **kwargs)  # noqa: E501
            return data

    def del_trace_req_with_http_info(self, x_nextensio_group, tenant_id, rid, group, **kwargs):  # noqa: E501
        """delete trace request  # noqa: E501

        delete trace request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_trace_req_with_http_info(x_nextensio_group, tenant_id, rid, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str rid: rule id (required)
        :param str group: group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'rid', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_trace_req" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_trace_req`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_trace_req`")  # noqa: E501
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `del_trace_req`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `del_trace_req`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/tracereqrule/{rid}/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_user(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """delete a user  # noqa: E501

        allows an admin to delete an existing user from the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_user_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.del_user_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def del_user_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """delete a user  # noqa: E501

        allows an admin to delete an existing user from the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_user`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_user`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `del_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/user/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_user_key(self, x_nextensio_group, tenant_id, key, **kwargs):  # noqa: E501
        """delete API key  # noqa: E501

        delete API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user_key(x_nextensio_group, tenant_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str key: key name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_user_key_with_http_info(x_nextensio_group, tenant_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.del_user_key_with_http_info(x_nextensio_group, tenant_id, key, **kwargs)  # noqa: E501
            return data

    def del_user_key_with_http_info(self, x_nextensio_group, tenant_id, key, **kwargs):  # noqa: E501
        """delete API key  # noqa: E501

        delete API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_user_key_with_http_info(x_nextensio_group, tenant_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str key: key name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_user_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `del_user_key`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `del_user_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `del_user_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/del/userkey/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_admin_for_groups(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """get all admins of a tenant group  # noqa: E501

        allows an user to retrieve all available admin of a tenant group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_for_groups(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group name (required)
        :return: AdmGroupsDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_admin_for_groups_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_admin_for_groups_with_http_info(x_nextensio_group, tenant_id, group, **kwargs)  # noqa: E501
            return data

    def get_admin_for_groups_with_http_info(self, x_nextensio_group, tenant_id, group, **kwargs):  # noqa: E501
        """get all admins of a tenant group  # noqa: E501

        allows an user to retrieve all available admin of a tenant group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_for_groups_with_http_info(x_nextensio_group, tenant_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str group: provide group name (required)
        :return: AdmGroupsDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admin_for_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_admin_for_groups`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_admin_for_groups`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_admin_for_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/groupadms/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdmGroupsDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_admin_groups(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all admin groups of a tenant  # noqa: E501

        allows an user to retrieve all available admin groups of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_groups(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AdmGroupsArray
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_admin_groups_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_admin_groups_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_admin_groups_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all admin groups of a tenant  # noqa: E501

        allows an user to retrieve all available admin groups of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_admin_groups_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AdmGroupsArray
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admin_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_admin_groups`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_admin_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/alladmgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdmGroupsArray',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_bundle_attr(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all bundle attrs  # noqa: E501

        Retrieve all bundle attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundle_attr(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: BundleAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_bundle_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_bundle_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_bundle_attr_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all bundle attrs  # noqa: E501

        Retrieve all bundle attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundle_attr_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: BundleAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bundle_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_bundle_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_bundle_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allbundleattr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleAttrMultiple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_bundle_rules(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get all bundle rules in a tenant  # noqa: E501

        get all bundle rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundle_rules(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: bundle ID (required)
        :return: AllBundleRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_bundle_rules_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_bundle_rules_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
            return data

    def get_all_bundle_rules_with_http_info(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get all bundle rules in a tenant  # noqa: E501

        get all bundle rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundle_rules_with_http_info(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: bundle ID (required)
        :return: AllBundleRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bundle_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_bundle_rules`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_bundle_rules`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `get_all_bundle_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/bundlerules/{bid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllBundleRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_bundles(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all bundles  # noqa: E501

        Retrieve all bundles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundles(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :return: AllBundles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_bundles_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_bundles_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_bundles_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all bundles  # noqa: E501

        Retrieve all bundles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_bundles_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :return: AllBundles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_bundles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_bundles`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_bundles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allbundles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllBundles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_certs(self, x_nextensio_group, **kwargs):  # noqa: E501
        """get all certificates  # noqa: E501

        allows a user to get a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_certs(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: AllCerts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_certs_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_certs_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def get_all_certs_with_http_info(self, x_nextensio_group, **kwargs):  # noqa: E501
        """get all certificates  # noqa: E501

        allows a user to get a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_certs_with_http_info(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: AllCerts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_certs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_certs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/get/allcerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllCerts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_host_attr(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all host attrs  # noqa: E501

        Retrieve all host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_attr(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: HostAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_host_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_host_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_host_attr_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all host attrs  # noqa: E501

        Retrieve all host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_attr_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: HostAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_host_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_host_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_host_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allhostattr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostAttrMultiple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_host_rules(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """get all host rules in a tenant  # noqa: E501

        get all host rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_rules(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: host ID (required)
        :return: AllHostRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_host_rules_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_host_rules_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
            return data

    def get_all_host_rules_with_http_info(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """get all host rules in a tenant  # noqa: E501

        get all host rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_host_rules_with_http_info(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: host ID (required)
        :return: AllHostRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_host_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_host_rules`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_host_rules`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_all_host_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/hostrules/{host}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllHostRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_idps(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all IDPs for a tenant  # noqa: E501

        allows a tenant user to retrieve all IDPs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_idps(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: IdpStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_idps_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_idps_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_idps_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all IDPs for a tenant  # noqa: E501

        allows a tenant user to retrieve all IDPs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_idps_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: IdpStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_idps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_idps`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_idps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allidps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdpStruct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_policies(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all policies in a tenant  # noqa: E501

        get all policies in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: GetAllPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_policies_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_policies_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_policies_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all policies in a tenant  # noqa: E501

        get all policies in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: GetAllPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_policies`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allpolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllPolicies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_stats_rules(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all stats rules in a tenant  # noqa: E501

        get all stats rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_stats_rules(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllStatsRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_stats_rules_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_stats_rules_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_stats_rules_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all stats rules in a tenant  # noqa: E501

        get all stats rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_stats_rules_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllStatsRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_stats_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_stats_rules`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_stats_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/statsrule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllStatsRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_tenant_cluster(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all clusters assigned for a tenant  # noqa: E501

        allows to retrieve info of all clusters assigned to a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_tenant_cluster(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllTenantclusters
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_tenant_cluster_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all clusters assigned for a tenant  # noqa: E501

        allows to retrieve info of all clusters assigned to a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllTenantclusters
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_tenant_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_tenant_cluster`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_tenant_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/alltenantclusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllTenantclusters',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trace_reqs(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get info about all trace requests  # noqa: E501

        retrieves info about all trace requests for the Trace policy. The trace requests specify the criteria to be used to trace one or more matching flows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trace_reqs(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllTraceReqDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_trace_reqs_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_trace_reqs_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_trace_reqs_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get info about all trace requests  # noqa: E501

        retrieves info about all trace requests for the Trace policy. The trace requests specify the criteria to be used to trace one or more matching flows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trace_reqs_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllTraceReqDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trace_reqs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_trace_reqs`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_trace_reqs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/alltracereq', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllTraceReqDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trace_rules(self, x_nextensio_group, tenant_id, traceid, **kwargs):  # noqa: E501
        """get all trace rules in a tenant  # noqa: E501

        get all trace rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trace_rules(x_nextensio_group, tenant_id, traceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str traceid: trace ID (required)
        :return: AllTraceRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_trace_rules_with_http_info(x_nextensio_group, tenant_id, traceid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_trace_rules_with_http_info(x_nextensio_group, tenant_id, traceid, **kwargs)  # noqa: E501
            return data

    def get_all_trace_rules_with_http_info(self, x_nextensio_group, tenant_id, traceid, **kwargs):  # noqa: E501
        """get all trace rules in a tenant  # noqa: E501

        get all trace rules in a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trace_rules_with_http_info(x_nextensio_group, tenant_id, traceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str traceid: trace ID (required)
        :return: AllTraceRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'traceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trace_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_trace_rules`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_trace_rules`")  # noqa: E501
        # verify the required parameter 'traceid' is set
        if ('traceid' not in params or
                params['traceid'] is None):
            raise ValueError("Missing the required parameter `traceid` when calling `get_all_trace_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'traceid' in params:
            path_params['traceid'] = params['traceid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/tracereqrules/{traceid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllTraceRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_user_attr(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all user attrs  # noqa: E501

        Retrieve all user attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_user_attr(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_user_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_user_attr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_user_attr_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all user attrs  # noqa: E501

        Retrieve all user attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_user_attr_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserAttrMultiple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_user_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_user_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_user_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/alluserattr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAttrMultiple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_users(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all the users of a tenant  # noqa: E501

        allows an admin to get details of all users of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_users(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllUserDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_users_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_users_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_all_users_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all the users of a tenant  # noqa: E501

        allows an admin to get details of all users of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_users_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllUserDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_all_users`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_all_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllUserDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attr_collection_hdr(self, x_nextensio_group, tenant_id, type, **kwargs):  # noqa: E501
        """get the header of an attributes collection for a tenant  # noqa: E501

        allows a user to retrieve the header doc for an attributes collection. This collection may have a list of all the Users, Apps, or Appgroups with their attributes. The header doc provides info such as version, who last changed the collection and when.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attr_collection_hdr(x_nextensio_group, tenant_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str type: provide attribute collection type. Value can be Users, AppGroups, or Apps. (required)
        :return: DataHdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attr_collection_hdr_with_http_info(x_nextensio_group, tenant_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attr_collection_hdr_with_http_info(x_nextensio_group, tenant_id, type, **kwargs)  # noqa: E501
            return data

    def get_attr_collection_hdr_with_http_info(self, x_nextensio_group, tenant_id, type, **kwargs):  # noqa: E501
        """get the header of an attributes collection for a tenant  # noqa: E501

        allows a user to retrieve the header doc for an attributes collection. This collection may have a list of all the Users, Apps, or Appgroups with their attributes. The header doc provides info such as version, who last changed the collection and when.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attr_collection_hdr_with_http_info(x_nextensio_group, tenant_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str type: provide attribute collection type. Value can be Users, AppGroups, or Apps. (required)
        :return: DataHdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attr_collection_hdr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_attr_collection_hdr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_attr_collection_hdr`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_attr_collection_hdr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/attrhdr/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataHdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get bundle info of a tenant  # noqa: E501

        Retrieve bundle info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :param str bid: provie bundle ID (required)
        :return: GetBundleStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
            return data

    def get_bundle_with_http_info(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get bundle info of a tenant  # noqa: E501

        Retrieve bundle info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_with_http_info(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provie tenant ID (required)
        :param str bid: provie bundle ID (required)
        :return: GetBundleStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_bundle`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_bundle`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `get_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/bundle/{bid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBundleStruct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_attr(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get bundle attrs  # noqa: E501

        Retrieve bundle attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_attr(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: provide bundle ID (required)
        :return: BundleAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_attr_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_attr_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
            return data

    def get_bundle_attr_with_http_info(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get bundle attrs  # noqa: E501

        Retrieve bundle attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_attr_with_http_info(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: provide bundle ID (required)
        :return: BundleAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_bundle_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_bundle_attr`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `get_bundle_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/bundleattr/{bid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleAttrSingle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_status(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get the status of every instance of a specific AppGroup extender for a tenant  # noqa: E501

        allows a user to retrieve the status of all instances of an AppGroup extender based on the extender ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_status(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: provide AppGroup extender unique ID. (required)
        :return: BundleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_status_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_status_with_http_info(x_nextensio_group, tenant_id, bid, **kwargs)  # noqa: E501
            return data

    def get_bundle_status_with_http_info(self, x_nextensio_group, tenant_id, bid, **kwargs):  # noqa: E501
        """get the status of every instance of a specific AppGroup extender for a tenant  # noqa: E501

        allows a user to retrieve the status of all instances of an AppGroup extender based on the extender ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_status_with_http_info(x_nextensio_group, tenant_id, bid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str bid: provide AppGroup extender unique ID. (required)
        :return: BundleStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'bid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_bundle_status`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_bundle_status`")  # noqa: E501
        # verify the required parameter 'bid' is set
        if ('bid' not in params or
                params['bid'] is None):
            raise ValueError("Missing the required parameter `bid` when calling `get_bundle_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'bid' in params:
            path_params['bid'] = params['bid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/bundlestatus/{bid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cert(self, x_nextensio_group, certid, **kwargs):  # noqa: E501
        """get a certificate  # noqa: E501

        allows a user to get a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cert(x_nextensio_group, certid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str certid: Certificate ID (required)
        :return: CertStructWithResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cert_with_http_info(x_nextensio_group, certid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cert_with_http_info(x_nextensio_group, certid, **kwargs)  # noqa: E501
            return data

    def get_cert_with_http_info(self, x_nextensio_group, certid, **kwargs):  # noqa: E501
        """get a certificate  # noqa: E501

        allows a user to get a Nextensio Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cert_with_http_info(x_nextensio_group, certid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str certid: Certificate ID (required)
        :return: CertStructWithResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'certid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_cert`")  # noqa: E501
        # verify the required parameter 'certid' is set
        if ('certid' not in params or
                params['certid'] is None):
            raise ValueError("Missing the required parameter `certid` when calling `get_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certid' in params:
            path_params['certid'] = params['certid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/get/cert/{certid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertStructWithResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_id(self, x_nextensio_group, key, **kwargs):  # noqa: E501
        """get the clientid providing the proper key/password  # noqa: E501

        ask for the IDP clientID for nextensio app, key/password protected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_id(x_nextensio_group, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str key: key/password. (required)
        :return: ClientID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_id_with_http_info(x_nextensio_group, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_id_with_http_info(x_nextensio_group, key, **kwargs)  # noqa: E501
            return data

    def get_client_id_with_http_info(self, x_nextensio_group, key, **kwargs):  # noqa: E501
        """get the clientid providing the proper key/password  # noqa: E501

        ask for the IDP clientID for nextensio app, key/password protected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_id_with_http_info(x_nextensio_group, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str key: key/password. (required)
        :return: ClientID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_client_id`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_client_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/noauth/clientid/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gateways(self, x_nextensio_group, **kwargs):  # noqa: E501
        """lists all gateways  # noqa: E501

        allows a user to retrieve all gateways available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gateways(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: AllGateways
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gateways_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gateways_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def get_gateways_with_http_info(self, x_nextensio_group, **kwargs):  # noqa: E501
        """lists all gateways  # noqa: E501

        allows a user to retrieve all gateways available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gateways_with_http_info(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: AllGateways
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_gateways`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/get/allgateways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllGateways',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_host_attr(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """get host attrs  # noqa: E501

        Retrieve host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_attr(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: provide host name (required)
        :return: HostAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_host_attr_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_host_attr_with_http_info(x_nextensio_group, tenant_id, host, **kwargs)  # noqa: E501
            return data

    def get_host_attr_with_http_info(self, x_nextensio_group, tenant_id, host, **kwargs):  # noqa: E501
        """get host attrs  # noqa: E501

        Retrieve host attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_attr_with_http_info(x_nextensio_group, tenant_id, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str host: provide host name (required)
        :return: HostAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_host_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_host_attr`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_host_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/hostattr/{host}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostAttrSingle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mgd_tenant(self, tenant_id, x_nextensio_group, **kwargs):  # noqa: E501
        """get all tenant  # noqa: E501

        allows a user to get details of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mgd_tenant(tenant_id, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: provide tenant ID (required)
        :param str x_nextensio_group: (required)
        :return: TenantDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mgd_tenant_with_http_info(tenant_id, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mgd_tenant_with_http_info(tenant_id, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def get_mgd_tenant_with_http_info(self, tenant_id, x_nextensio_group, **kwargs):  # noqa: E501
        """get all tenant  # noqa: E501

        allows a user to get details of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mgd_tenant_with_http_info(tenant_id, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: provide tenant ID (required)
        :param str x_nextensio_group: (required)
        :return: TenantDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mgd_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_mgd_tenant`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_mgd_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/mgdtenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy(self, x_nextensio_group, tenant_id, policyid, **kwargs):  # noqa: E501
        """get policy given the policyid  # noqa: E501

        get policy given the policyid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy(x_nextensio_group, tenant_id, policyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str policyid: trace id (required)
        :return: GetPolicyStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_with_http_info(x_nextensio_group, tenant_id, policyid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_with_http_info(x_nextensio_group, tenant_id, policyid, **kwargs)  # noqa: E501
            return data

    def get_policy_with_http_info(self, x_nextensio_group, tenant_id, policyid, **kwargs):  # noqa: E501
        """get policy given the policyid  # noqa: E501

        get policy given the policyid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_with_http_info(x_nextensio_group, tenant_id, policyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str policyid: trace id (required)
        :return: GetPolicyStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'policyid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_policy`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_policy`")  # noqa: E501
        # verify the required parameter 'policyid' is set
        if ('policyid' not in params or
                params['policyid'] is None):
            raise ValueError("Missing the required parameter `policyid` when calling `get_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'policyid' in params:
            path_params['policyid'] = params['policyid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/policy/{policyid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPolicyStruct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant(self, tenant_id, x_nextensio_group, **kwargs):  # noqa: E501
        """get a tenant  # noqa: E501

        allows a user to get details of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant(tenant_id, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: provide tenant ID (required)
        :param str x_nextensio_group: (required)
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_with_http_info(tenant_id, x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_with_http_info(tenant_id, x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def get_tenant_with_http_info(self, tenant_id, x_nextensio_group, **kwargs):  # noqa: E501
        """get a tenant  # noqa: E501

        allows a user to get details of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_with_http_info(tenant_id, x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: provide tenant ID (required)
        :param str x_nextensio_group: (required)
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_tenant`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/tenant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tenant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant_cluster(self, x_nextensio_group, tenant_id, gateway, **kwargs):  # noqa: E501
        """get the  gateway information (nextensio internal) for a gateway assined to a tenant  # noqa: E501

        allows to retrieve a tenants gateway internal information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_cluster(x_nextensio_group, tenant_id, gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str gateway: provide gateway name (required)
        :return: GetTenantcluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, **kwargs)  # noqa: E501
            return data

    def get_tenant_cluster_with_http_info(self, x_nextensio_group, tenant_id, gateway, **kwargs):  # noqa: E501
        """get the  gateway information (nextensio internal) for a gateway assined to a tenant  # noqa: E501

        allows to retrieve a tenants gateway internal information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_cluster_with_http_info(x_nextensio_group, tenant_id, gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str gateway: provide gateway name (required)
        :return: GetTenantcluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'gateway']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_tenant_cluster`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_tenant_cluster`")  # noqa: E501
        # verify the required parameter 'gateway' is set
        if ('gateway' not in params or
                params['gateway'] is None):
            raise ValueError("Missing the required parameter `gateway` when calling `get_tenant_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'gateway' in params:
            path_params['gateway'] = params['gateway']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/tenantcluster/{gateway}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantcluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant_gateways(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """lists all gateways allocated for a tenant  # noqa: E501

        allows a tenant user to retrieve all gateways allocated to the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_gateways(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllGateways
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_gateways_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_gateways_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_tenant_gateways_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """lists all gateways allocated for a tenant  # noqa: E501

        allows a tenant user to retrieve all gateways allocated to the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_gateways_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: AllGateways
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_tenant_gateways`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_tenant_gateways`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/allgateways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllGateways',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenants(self, x_nextensio_group, **kwargs):  # noqa: E501
        """get all tenant  # noqa: E501

        allows a user to retrieve all existing tenants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenants(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: TenantDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenants_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenants_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def get_tenants_with_http_info(self, x_nextensio_group, **kwargs):  # noqa: E501
        """get all tenant  # noqa: E501

        allows a user to retrieve all existing tenants  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenants_with_http_info(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: TenantDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_tenants`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/get/alltenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trace_req(self, x_nextensio_group, tenant_id, traceid, **kwargs):  # noqa: E501
        """get info about a trace request  # noqa: E501

        retrieves info about a trace request for the Trace policy. The trace request specifies the criteria to be used to trace one or more matching flows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trace_req(x_nextensio_group, tenant_id, traceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str traceid: provide trace id, which is any user defined ID for a trace request (required)
        :return: TraceReqDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trace_req_with_http_info(x_nextensio_group, tenant_id, traceid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_trace_req_with_http_info(x_nextensio_group, tenant_id, traceid, **kwargs)  # noqa: E501
            return data

    def get_trace_req_with_http_info(self, x_nextensio_group, tenant_id, traceid, **kwargs):  # noqa: E501
        """get info about a trace request  # noqa: E501

        retrieves info about a trace request for the Trace policy. The trace request specifies the criteria to be used to trace one or more matching flows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trace_req_with_http_info(x_nextensio_group, tenant_id, traceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str traceid: provide trace id, which is any user defined ID for a trace request (required)
        :return: TraceReqDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'traceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trace_req" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_trace_req`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_trace_req`")  # noqa: E501
        # verify the required parameter 'traceid' is set
        if ('traceid' not in params or
                params['traceid'] is None):
            raise ValueError("Missing the required parameter `traceid` when calling `get_trace_req`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'traceid' in params:
            path_params['traceid'] = params['traceid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/tracereq/{traceid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TraceReqDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trace_requests_hdr(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get the header of a trace requests collection for a tenant  # noqa: E501

        allows a user to retrieve the header doc for a trace requests collection. The header doc provides info such as version, who last changed the collection and when.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trace_requests_hdr(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: DataHdr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trace_requests_hdr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_trace_requests_hdr_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_trace_requests_hdr_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get the header of a trace requests collection for a tenant  # noqa: E501

        allows a user to retrieve the header doc for a trace requests collection. The header doc provides info such as version, who last changed the collection and when.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trace_requests_hdr_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: DataHdr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trace_requests_hdr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_trace_requests_hdr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_trace_requests_hdr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/tracereqhdr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataHdr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get a user  # noqa: E501

        allows an admin to get details of an existing user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: UserDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get a user  # noqa: E501

        allows an admin to get details of an existing user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: UserDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/user/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_admin_role(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get the admin role of a user  # noqa: E501

        allows to retrieve a user's admin role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_admin_role(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide userid (required)
        :return: Adminrole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_admin_role_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_admin_role_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def get_user_admin_role_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get the admin role of a user  # noqa: E501

        allows to retrieve a user's admin role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_admin_role_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide userid (required)
        :return: Adminrole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_admin_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user_admin_role`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user_admin_role`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_user_admin_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/user/adminrole/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Adminrole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_attr(self, x_nextensio_group, tenant_id, user_id, **kwargs):  # noqa: E501
        """get user attrs  # noqa: E501

        Retrieve user attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_attr(x_nextensio_group, tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str user_id: provide User ID (required)
        :return: UserAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_attr_with_http_info(x_nextensio_group, tenant_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_attr_with_http_info(x_nextensio_group, tenant_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_user_attr_with_http_info(self, x_nextensio_group, tenant_id, user_id, **kwargs):  # noqa: E501
        """get user attrs  # noqa: E501

        Retrieve user attributes defined by the admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_attr_with_http_info(x_nextensio_group, tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str user_id: provide User ID (required)
        :return: UserAttrSingle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_attr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user_attr`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user_attr`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_attr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/userattr/{user-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserAttrSingle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_keys(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all the API keys in the tenant  # noqa: E501

        get all the API keys in the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_keys(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_keys_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_keys_with_http_info(x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def get_user_keys_with_http_info(self, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """get all the API keys in the tenant  # noqa: E501

        get all the API keys in the tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_keys_with_http_info(x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :return: UserKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user_keys`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/alluserkeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_onboard_log(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get a user's onboarding info  # noqa: E501

        retrieves info about a user's last attempt to onboard to a Nextensio gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_onboard_log(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user id (required)
        :return: OnboardLogDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_onboard_log_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_onboard_log_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def get_user_onboard_log_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get a user's onboarding info  # noqa: E501

        retrieves info about a user's last attempt to onboard to a Nextensio gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_onboard_log_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user id (required)
        :return: OnboardLogDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_onboard_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user_onboard_log`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user_onboard_log`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_user_onboard_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/onboardlog/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnboardLogDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_status(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get details about user devices and their status  # noqa: E501

        allows an admin to get status of an existing user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_status(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: UserStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_status_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_status_with_http_info(x_nextensio_group, tenant_id, userid, **kwargs)  # noqa: E501
            return data

    def get_user_status_with_http_info(self, x_nextensio_group, tenant_id, userid, **kwargs):  # noqa: E501
        """get details about user devices and their status  # noqa: E501

        allows an admin to get status of an existing user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_status_with_http_info(x_nextensio_group, tenant_id, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide user ID (required)
        :return: UserStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `get_user_status`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_user_status`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `get_user_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/get/userstatus/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_tenant(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add or modify a tenant  # noqa: E501

        allows a tenant admin / MSP to modify certain parameters of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_tenant(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantUpdate body: provide tenant info (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_tenant_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_tenant_with_http_info(body, x_nextensio_group, tenant_id, **kwargs)  # noqa: E501
            return data

    def modify_tenant_with_http_info(self, body, x_nextensio_group, tenant_id, **kwargs):  # noqa: E501
        """add or modify a tenant  # noqa: E501

        allows a tenant admin / MSP to modify certain parameters of an existing tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_tenant_with_http_info(body, x_nextensio_group, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantUpdate body: provide tenant info (required)
        :param str x_nextensio_group: (required)
        :param str tenant_id: tenant ID (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_nextensio_group', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_tenant`")  # noqa: E501
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `modify_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `modify_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tenant', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def onboard(self, x_nextensio_group, **kwargs):  # noqa: E501
        """onboard a nextensio extender  # noqa: E501

        Onboard Nextensio extender running on a user device and return a set of parameters so that they can connect to a Nextensio gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.onboard(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: OnboardResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.onboard_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
        else:
            (data) = self.onboard_with_http_info(x_nextensio_group, **kwargs)  # noqa: E501
            return data

    def onboard_with_http_info(self, x_nextensio_group, **kwargs):  # noqa: E501
        """onboard a nextensio extender  # noqa: E501

        Onboard Nextensio extender running on a user device and return a set of parameters so that they can connect to a Nextensio gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.onboard_with_http_info(x_nextensio_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :return: OnboardResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method onboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `onboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global/get/onboard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OnboardResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def signup(self, body, **kwargs):  # noqa: E501
        """allows a user to signup  # noqa: E501

        allows a new user to signup as an admin on behalf of a new tenant. Create a new tenant with one user, the user signing up, and create default policies and everything needed to get the tenant going.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.signup(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupDetails body: provide name of tenant and email id of user signing up (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.signup_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.signup_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def signup_with_http_info(self, body, **kwargs):  # noqa: E501
        """allows a user to signup  # noqa: E501

        allows a new user to signup as an admin on behalf of a new tenant. Create a new tenant with one user, the user signing up, and create default policies and everything needed to get the tenant going.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.signup_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupDetails body: provide name of tenant and email id of user signing up (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method signup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `signup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/noauth/signup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upd_tenant_type(self, x_nextensio_group, tenant_id, type, **kwargs):  # noqa: E501
        """change the type of a tenant  # noqa: E501

        allows a superadmin to change the type of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upd_tenant_type(x_nextensio_group, tenant_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str type: provide type of tenant - self-managed, MSP-managed or MSP (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upd_tenant_type_with_http_info(x_nextensio_group, tenant_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.upd_tenant_type_with_http_info(x_nextensio_group, tenant_id, type, **kwargs)  # noqa: E501
            return data

    def upd_tenant_type_with_http_info(self, x_nextensio_group, tenant_id, type, **kwargs):  # noqa: E501
        """change the type of a tenant  # noqa: E501

        allows a superadmin to change the type of a tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upd_tenant_type_with_http_info(x_nextensio_group, tenant_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str type: provide type of tenant - self-managed, MSP-managed or MSP (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upd_tenant_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `upd_tenant_type`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `upd_tenant_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `upd_tenant_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/tenanttype/{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upd_user_role(self, x_nextensio_group, tenant_id, userid, role, **kwargs):  # noqa: E501
        """assign a new role for a user  # noqa: E501

        allows a superadmin or tenant admin to assign a user to a new role. The new role may be that of a tenant or group admin or that of a regular user. For eg., a regular user can be made a group admin or an overall admin or vice-versa, or a group admin can be made an overall admin or vice-versa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upd_user_role(x_nextensio_group, tenant_id, userid, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide ID of user (required)
        :param str role: provide new role. Valid values are regular, admin, or groupname-admin (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upd_user_role_with_http_info(x_nextensio_group, tenant_id, userid, role, **kwargs)  # noqa: E501
        else:
            (data) = self.upd_user_role_with_http_info(x_nextensio_group, tenant_id, userid, role, **kwargs)  # noqa: E501
            return data

    def upd_user_role_with_http_info(self, x_nextensio_group, tenant_id, userid, role, **kwargs):  # noqa: E501
        """assign a new role for a user  # noqa: E501

        allows a superadmin or tenant admin to assign a user to a new role. The new role may be that of a tenant or group admin or that of a regular user. For eg., a regular user can be made a group admin or an overall admin or vice-versa, or a group admin can be made an overall admin or vice-versa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upd_user_role_with_http_info(x_nextensio_group, tenant_id, userid, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_nextensio_group: (required)
        :param str tenant_id: provide tenant ID (required)
        :param str userid: provide ID of user (required)
        :param str role: provide new role. Valid values are regular, admin, or groupname-admin (required)
        :return: PostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_nextensio_group', 'tenant_id', 'userid', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upd_user_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_nextensio_group' is set
        if ('x_nextensio_group' not in params or
                params['x_nextensio_group'] is None):
            raise ValueError("Missing the required parameter `x_nextensio_group` when calling `upd_user_role`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `upd_user_role`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `upd_user_role`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `upd_user_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenant-id'] = params['tenant_id']  # noqa: E501
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_nextensio_group' in params:
            header_params['X-Nextensio-Group'] = params['x_nextensio_group']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tenant/{tenant-id}/add/user/adminrole/{userid}/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
