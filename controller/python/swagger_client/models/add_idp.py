# coding: utf-8

"""
    Controller APIs

    APIs to act on Nextensio Controller  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@nextensio.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddIDP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'name': 'str',
        'policy': 'str',
        'domain': 'str',
        'group': 'str',
        'auth': 'str',
        'jwks': 'str',
        'token': 'str',
        'issuer': 'str',
        'sso': 'str',
        'audience': 'str',
        'client': 'str',
        'secret': 'str',
        'cert': 'str',
        'keyid': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'name': 'name',
        'policy': 'policy',
        'domain': 'domain',
        'group': 'group',
        'auth': 'auth',
        'jwks': 'jwks',
        'token': 'token',
        'issuer': 'issuer',
        'sso': 'sso',
        'audience': 'audience',
        'client': 'client',
        'secret': 'secret',
        'cert': 'cert',
        'keyid': 'keyid'
    }

    def __init__(self, provider=None, name=None, policy=None, domain=None, group=None, auth=None, jwks=None, token=None, issuer=None, sso=None, audience=None, client=None, secret=None, cert=None, keyid=None):  # noqa: E501
        """AddIDP - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._name = None
        self._policy = None
        self._domain = None
        self._group = None
        self._auth = None
        self._jwks = None
        self._token = None
        self._issuer = None
        self._sso = None
        self._audience = None
        self._client = None
        self._secret = None
        self._cert = None
        self._keyid = None
        self.discriminator = None
        self.provider = provider
        self.name = name
        self.policy = policy
        self.domain = domain
        self.group = group
        self.auth = auth
        self.jwks = jwks
        self.token = token
        self.issuer = issuer
        self.sso = sso
        self.audience = audience
        self.client = client
        self.secret = secret
        self.cert = cert
        self.keyid = keyid

    @property
    def provider(self):
        """Gets the provider of this AddIDP.  # noqa: E501


        :return: The provider of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AddIDP.


        :param provider: The provider of this AddIDP.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def name(self):
        """Gets the name of this AddIDP.  # noqa: E501


        :return: The name of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddIDP.


        :param name: The name of this AddIDP.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this AddIDP.  # noqa: E501


        :return: The policy of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this AddIDP.


        :param policy: The policy of this AddIDP.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy

    @property
    def domain(self):
        """Gets the domain of this AddIDP.  # noqa: E501


        :return: The domain of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AddIDP.


        :param domain: The domain of this AddIDP.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def group(self):
        """Gets the group of this AddIDP.  # noqa: E501


        :return: The group of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AddIDP.


        :param group: The group of this AddIDP.  # noqa: E501
        :type: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def auth(self):
        """Gets the auth of this AddIDP.  # noqa: E501


        :return: The auth of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this AddIDP.


        :param auth: The auth of this AddIDP.  # noqa: E501
        :type: str
        """
        if auth is None:
            raise ValueError("Invalid value for `auth`, must not be `None`")  # noqa: E501

        self._auth = auth

    @property
    def jwks(self):
        """Gets the jwks of this AddIDP.  # noqa: E501


        :return: The jwks of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this AddIDP.


        :param jwks: The jwks of this AddIDP.  # noqa: E501
        :type: str
        """
        if jwks is None:
            raise ValueError("Invalid value for `jwks`, must not be `None`")  # noqa: E501

        self._jwks = jwks

    @property
    def token(self):
        """Gets the token of this AddIDP.  # noqa: E501


        :return: The token of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AddIDP.


        :param token: The token of this AddIDP.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def issuer(self):
        """Gets the issuer of this AddIDP.  # noqa: E501


        :return: The issuer of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AddIDP.


        :param issuer: The issuer of this AddIDP.  # noqa: E501
        :type: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501

        self._issuer = issuer

    @property
    def sso(self):
        """Gets the sso of this AddIDP.  # noqa: E501


        :return: The sso of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this AddIDP.


        :param sso: The sso of this AddIDP.  # noqa: E501
        :type: str
        """
        if sso is None:
            raise ValueError("Invalid value for `sso`, must not be `None`")  # noqa: E501

        self._sso = sso

    @property
    def audience(self):
        """Gets the audience of this AddIDP.  # noqa: E501


        :return: The audience of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this AddIDP.


        :param audience: The audience of this AddIDP.  # noqa: E501
        :type: str
        """
        if audience is None:
            raise ValueError("Invalid value for `audience`, must not be `None`")  # noqa: E501

        self._audience = audience

    @property
    def client(self):
        """Gets the client of this AddIDP.  # noqa: E501


        :return: The client of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this AddIDP.


        :param client: The client of this AddIDP.  # noqa: E501
        :type: str
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def secret(self):
        """Gets the secret of this AddIDP.  # noqa: E501


        :return: The secret of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this AddIDP.


        :param secret: The secret of this AddIDP.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def cert(self):
        """Gets the cert of this AddIDP.  # noqa: E501


        :return: The cert of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this AddIDP.


        :param cert: The cert of this AddIDP.  # noqa: E501
        :type: str
        """
        if cert is None:
            raise ValueError("Invalid value for `cert`, must not be `None`")  # noqa: E501

        self._cert = cert

    @property
    def keyid(self):
        """Gets the keyid of this AddIDP.  # noqa: E501


        :return: The keyid of this AddIDP.  # noqa: E501
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this AddIDP.


        :param keyid: The keyid of this AddIDP.  # noqa: E501
        :type: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")  # noqa: E501

        self._keyid = keyid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddIDP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddIDP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
