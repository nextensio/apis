# coding: utf-8

"""
    Controller APIs

    APIs to act on Nextensio Controller  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@nextensio.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'id': 'str',
        'name': 'str',
        'group': 'str',
        'domains': 'list[str]',
        'easymode': 'bool',
        'splittunnel': 'bool',
        'cfgvn': 'str',
        'idps': 'list[str]',
        'admgroups': 'list[str]',
        'type': 'str',
        'mspid': 'str',
        'mgdtenants': 'list[str]'
    }

    attribute_map = {
        'result': 'Result',
        'id': '_id',
        'name': 'name',
        'group': 'group',
        'domains': 'domains',
        'easymode': 'easymode',
        'splittunnel': 'splittunnel',
        'cfgvn': 'cfgvn',
        'idps': 'idps',
        'admgroups': 'admgroups',
        'type': 'type',
        'mspid': 'mspid',
        'mgdtenants': 'mgdtenants'
    }

    def __init__(self, result=None, id=None, name=None, group=None, domains=None, easymode=None, splittunnel=None, cfgvn=None, idps=None, admgroups=None, type=None, mspid=None, mgdtenants=None):  # noqa: E501
        """Tenant - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._id = None
        self._name = None
        self._group = None
        self._domains = None
        self._easymode = None
        self._splittunnel = None
        self._cfgvn = None
        self._idps = None
        self._admgroups = None
        self._type = None
        self._mspid = None
        self._mgdtenants = None
        self.discriminator = None
        self.result = result
        self.id = id
        self.name = name
        self.group = group
        self.domains = domains
        self.easymode = easymode
        self.splittunnel = splittunnel
        self.cfgvn = cfgvn
        self.idps = idps
        self.admgroups = admgroups
        self.type = type
        self.mspid = mspid
        self.mgdtenants = mgdtenants

    @property
    def result(self):
        """Gets the result of this Tenant.  # noqa: E501


        :return: The result of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Tenant.


        :param result: The result of this Tenant.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def id(self):
        """Gets the id of this Tenant.  # noqa: E501


        :return: The id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenant.


        :param id: The id of this Tenant.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tenant.  # noqa: E501


        :return: The name of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.


        :param name: The name of this Tenant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def group(self):
        """Gets the group of this Tenant.  # noqa: E501


        :return: The group of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Tenant.


        :param group: The group of this Tenant.  # noqa: E501
        :type: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def domains(self):
        """Gets the domains of this Tenant.  # noqa: E501


        :return: The domains of this Tenant.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Tenant.


        :param domains: The domains of this Tenant.  # noqa: E501
        :type: list[str]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")  # noqa: E501

        self._domains = domains

    @property
    def easymode(self):
        """Gets the easymode of this Tenant.  # noqa: E501


        :return: The easymode of this Tenant.  # noqa: E501
        :rtype: bool
        """
        return self._easymode

    @easymode.setter
    def easymode(self, easymode):
        """Sets the easymode of this Tenant.


        :param easymode: The easymode of this Tenant.  # noqa: E501
        :type: bool
        """
        if easymode is None:
            raise ValueError("Invalid value for `easymode`, must not be `None`")  # noqa: E501

        self._easymode = easymode

    @property
    def splittunnel(self):
        """Gets the splittunnel of this Tenant.  # noqa: E501


        :return: The splittunnel of this Tenant.  # noqa: E501
        :rtype: bool
        """
        return self._splittunnel

    @splittunnel.setter
    def splittunnel(self, splittunnel):
        """Sets the splittunnel of this Tenant.


        :param splittunnel: The splittunnel of this Tenant.  # noqa: E501
        :type: bool
        """
        if splittunnel is None:
            raise ValueError("Invalid value for `splittunnel`, must not be `None`")  # noqa: E501

        self._splittunnel = splittunnel

    @property
    def cfgvn(self):
        """Gets the cfgvn of this Tenant.  # noqa: E501


        :return: The cfgvn of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._cfgvn

    @cfgvn.setter
    def cfgvn(self, cfgvn):
        """Sets the cfgvn of this Tenant.


        :param cfgvn: The cfgvn of this Tenant.  # noqa: E501
        :type: str
        """
        if cfgvn is None:
            raise ValueError("Invalid value for `cfgvn`, must not be `None`")  # noqa: E501

        self._cfgvn = cfgvn

    @property
    def idps(self):
        """Gets the idps of this Tenant.  # noqa: E501


        :return: The idps of this Tenant.  # noqa: E501
        :rtype: list[str]
        """
        return self._idps

    @idps.setter
    def idps(self, idps):
        """Sets the idps of this Tenant.


        :param idps: The idps of this Tenant.  # noqa: E501
        :type: list[str]
        """
        if idps is None:
            raise ValueError("Invalid value for `idps`, must not be `None`")  # noqa: E501

        self._idps = idps

    @property
    def admgroups(self):
        """Gets the admgroups of this Tenant.  # noqa: E501


        :return: The admgroups of this Tenant.  # noqa: E501
        :rtype: list[str]
        """
        return self._admgroups

    @admgroups.setter
    def admgroups(self, admgroups):
        """Sets the admgroups of this Tenant.


        :param admgroups: The admgroups of this Tenant.  # noqa: E501
        :type: list[str]
        """
        if admgroups is None:
            raise ValueError("Invalid value for `admgroups`, must not be `None`")  # noqa: E501

        self._admgroups = admgroups

    @property
    def type(self):
        """Gets the type of this Tenant.  # noqa: E501


        :return: The type of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tenant.


        :param type: The type of this Tenant.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def mspid(self):
        """Gets the mspid of this Tenant.  # noqa: E501


        :return: The mspid of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._mspid

    @mspid.setter
    def mspid(self, mspid):
        """Sets the mspid of this Tenant.


        :param mspid: The mspid of this Tenant.  # noqa: E501
        :type: str
        """
        if mspid is None:
            raise ValueError("Invalid value for `mspid`, must not be `None`")  # noqa: E501

        self._mspid = mspid

    @property
    def mgdtenants(self):
        """Gets the mgdtenants of this Tenant.  # noqa: E501


        :return: The mgdtenants of this Tenant.  # noqa: E501
        :rtype: list[str]
        """
        return self._mgdtenants

    @mgdtenants.setter
    def mgdtenants(self, mgdtenants):
        """Sets the mgdtenants of this Tenant.


        :param mgdtenants: The mgdtenants of this Tenant.  # noqa: E501
        :type: list[str]
        """
        if mgdtenants is None:
            raise ValueError("Invalid value for `mgdtenants`, must not be `None`")  # noqa: E501

        self._mgdtenants = mgdtenants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
