# coding: utf-8

"""
    Controller APIs

    APIs to act on Nextensio Controller  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@nextensio.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnboardLogDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'gw': 'str',
        'pod': 'int',
        'podnm': 'str',
        'connectid': 'str',
        'onbtime': 'str',
        'count': 'int',
        'prevtime': 'str'
    }

    attribute_map = {
        'result': 'Result',
        'gw': 'gw',
        'pod': 'pod',
        'podnm': 'podnm',
        'connectid': 'connectid',
        'onbtime': 'onbtime',
        'count': 'count',
        'prevtime': 'prevtime'
    }

    def __init__(self, result=None, gw=None, pod=None, podnm=None, connectid=None, onbtime=None, count=None, prevtime=None):  # noqa: E501
        """OnboardLogDetails - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._gw = None
        self._pod = None
        self._podnm = None
        self._connectid = None
        self._onbtime = None
        self._count = None
        self._prevtime = None
        self.discriminator = None
        self.result = result
        self.gw = gw
        self.pod = pod
        self.podnm = podnm
        self.connectid = connectid
        self.onbtime = onbtime
        self.count = count
        self.prevtime = prevtime

    @property
    def result(self):
        """Gets the result of this OnboardLogDetails.  # noqa: E501


        :return: The result of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this OnboardLogDetails.


        :param result: The result of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def gw(self):
        """Gets the gw of this OnboardLogDetails.  # noqa: E501


        :return: The gw of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._gw

    @gw.setter
    def gw(self, gw):
        """Sets the gw of this OnboardLogDetails.


        :param gw: The gw of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if gw is None:
            raise ValueError("Invalid value for `gw`, must not be `None`")  # noqa: E501

        self._gw = gw

    @property
    def pod(self):
        """Gets the pod of this OnboardLogDetails.  # noqa: E501


        :return: The pod of this OnboardLogDetails.  # noqa: E501
        :rtype: int
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this OnboardLogDetails.


        :param pod: The pod of this OnboardLogDetails.  # noqa: E501
        :type: int
        """
        if pod is None:
            raise ValueError("Invalid value for `pod`, must not be `None`")  # noqa: E501

        self._pod = pod

    @property
    def podnm(self):
        """Gets the podnm of this OnboardLogDetails.  # noqa: E501


        :return: The podnm of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._podnm

    @podnm.setter
    def podnm(self, podnm):
        """Sets the podnm of this OnboardLogDetails.


        :param podnm: The podnm of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if podnm is None:
            raise ValueError("Invalid value for `podnm`, must not be `None`")  # noqa: E501

        self._podnm = podnm

    @property
    def connectid(self):
        """Gets the connectid of this OnboardLogDetails.  # noqa: E501


        :return: The connectid of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._connectid

    @connectid.setter
    def connectid(self, connectid):
        """Sets the connectid of this OnboardLogDetails.


        :param connectid: The connectid of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if connectid is None:
            raise ValueError("Invalid value for `connectid`, must not be `None`")  # noqa: E501

        self._connectid = connectid

    @property
    def onbtime(self):
        """Gets the onbtime of this OnboardLogDetails.  # noqa: E501


        :return: The onbtime of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._onbtime

    @onbtime.setter
    def onbtime(self, onbtime):
        """Sets the onbtime of this OnboardLogDetails.


        :param onbtime: The onbtime of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if onbtime is None:
            raise ValueError("Invalid value for `onbtime`, must not be `None`")  # noqa: E501

        self._onbtime = onbtime

    @property
    def count(self):
        """Gets the count of this OnboardLogDetails.  # noqa: E501


        :return: The count of this OnboardLogDetails.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OnboardLogDetails.


        :param count: The count of this OnboardLogDetails.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def prevtime(self):
        """Gets the prevtime of this OnboardLogDetails.  # noqa: E501


        :return: The prevtime of this OnboardLogDetails.  # noqa: E501
        :rtype: str
        """
        return self._prevtime

    @prevtime.setter
    def prevtime(self, prevtime):
        """Sets the prevtime of this OnboardLogDetails.


        :param prevtime: The prevtime of this OnboardLogDetails.  # noqa: E501
        :type: str
        """
        if prevtime is None:
            raise ValueError("Invalid value for `prevtime`, must not be `None`")  # noqa: E501

        self._prevtime = prevtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnboardLogDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnboardLogDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
