# coding: utf-8

"""
    Controller APIs

    APIs to act on Nextensio Controller  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@nextensio.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnboardResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'userid': 'str',
        'tenant': 'str',
        'gateway': 'str',
        'domains': 'Domain',
        'connectid': 'str',
        'cluster': 'str',
        'podname': 'str',
        'cacert': 'str',
        'services': 'list[str]',
        'version': 'str',
        'keepalive': 'int',
        'splittunnel': 'bool'
    }

    attribute_map = {
        'result': 'Result',
        'userid': 'userid',
        'tenant': 'tenant',
        'gateway': 'gateway',
        'domains': 'domains',
        'connectid': 'connectid',
        'cluster': 'cluster',
        'podname': 'podname',
        'cacert': 'cacert',
        'services': 'services',
        'version': 'version',
        'keepalive': 'keepalive',
        'splittunnel': 'splittunnel'
    }

    def __init__(self, result=None, userid=None, tenant=None, gateway=None, domains=None, connectid=None, cluster=None, podname=None, cacert=None, services=None, version=None, keepalive=None, splittunnel=None):  # noqa: E501
        """OnboardResult - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._userid = None
        self._tenant = None
        self._gateway = None
        self._domains = None
        self._connectid = None
        self._cluster = None
        self._podname = None
        self._cacert = None
        self._services = None
        self._version = None
        self._keepalive = None
        self._splittunnel = None
        self.discriminator = None
        self.result = result
        self.userid = userid
        self.tenant = tenant
        self.gateway = gateway
        self.domains = domains
        self.connectid = connectid
        self.cluster = cluster
        self.podname = podname
        self.cacert = cacert
        self.services = services
        self.version = version
        self.keepalive = keepalive
        self.splittunnel = splittunnel

    @property
    def result(self):
        """Gets the result of this OnboardResult.  # noqa: E501


        :return: The result of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this OnboardResult.


        :param result: The result of this OnboardResult.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def userid(self):
        """Gets the userid of this OnboardResult.  # noqa: E501


        :return: The userid of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this OnboardResult.


        :param userid: The userid of this OnboardResult.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def tenant(self):
        """Gets the tenant of this OnboardResult.  # noqa: E501


        :return: The tenant of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this OnboardResult.


        :param tenant: The tenant of this OnboardResult.  # noqa: E501
        :type: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")  # noqa: E501

        self._tenant = tenant

    @property
    def gateway(self):
        """Gets the gateway of this OnboardResult.  # noqa: E501


        :return: The gateway of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this OnboardResult.


        :param gateway: The gateway of this OnboardResult.  # noqa: E501
        :type: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    @property
    def domains(self):
        """Gets the domains of this OnboardResult.  # noqa: E501


        :return: The domains of this OnboardResult.  # noqa: E501
        :rtype: Domain
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this OnboardResult.


        :param domains: The domains of this OnboardResult.  # noqa: E501
        :type: Domain
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")  # noqa: E501

        self._domains = domains

    @property
    def connectid(self):
        """Gets the connectid of this OnboardResult.  # noqa: E501


        :return: The connectid of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._connectid

    @connectid.setter
    def connectid(self, connectid):
        """Sets the connectid of this OnboardResult.


        :param connectid: The connectid of this OnboardResult.  # noqa: E501
        :type: str
        """
        if connectid is None:
            raise ValueError("Invalid value for `connectid`, must not be `None`")  # noqa: E501

        self._connectid = connectid

    @property
    def cluster(self):
        """Gets the cluster of this OnboardResult.  # noqa: E501


        :return: The cluster of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this OnboardResult.


        :param cluster: The cluster of this OnboardResult.  # noqa: E501
        :type: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def podname(self):
        """Gets the podname of this OnboardResult.  # noqa: E501


        :return: The podname of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._podname

    @podname.setter
    def podname(self, podname):
        """Sets the podname of this OnboardResult.


        :param podname: The podname of this OnboardResult.  # noqa: E501
        :type: str
        """
        if podname is None:
            raise ValueError("Invalid value for `podname`, must not be `None`")  # noqa: E501

        self._podname = podname

    @property
    def cacert(self):
        """Gets the cacert of this OnboardResult.  # noqa: E501


        :return: The cacert of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._cacert

    @cacert.setter
    def cacert(self, cacert):
        """Sets the cacert of this OnboardResult.


        :param cacert: The cacert of this OnboardResult.  # noqa: E501
        :type: str
        """
        if cacert is None:
            raise ValueError("Invalid value for `cacert`, must not be `None`")  # noqa: E501

        self._cacert = cacert

    @property
    def services(self):
        """Gets the services of this OnboardResult.  # noqa: E501


        :return: The services of this OnboardResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this OnboardResult.


        :param services: The services of this OnboardResult.  # noqa: E501
        :type: list[str]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def version(self):
        """Gets the version of this OnboardResult.  # noqa: E501


        :return: The version of this OnboardResult.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OnboardResult.


        :param version: The version of this OnboardResult.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def keepalive(self):
        """Gets the keepalive of this OnboardResult.  # noqa: E501


        :return: The keepalive of this OnboardResult.  # noqa: E501
        :rtype: int
        """
        return self._keepalive

    @keepalive.setter
    def keepalive(self, keepalive):
        """Sets the keepalive of this OnboardResult.


        :param keepalive: The keepalive of this OnboardResult.  # noqa: E501
        :type: int
        """
        if keepalive is None:
            raise ValueError("Invalid value for `keepalive`, must not be `None`")  # noqa: E501

        self._keepalive = keepalive

    @property
    def splittunnel(self):
        """Gets the splittunnel of this OnboardResult.  # noqa: E501


        :return: The splittunnel of this OnboardResult.  # noqa: E501
        :rtype: bool
        """
        return self._splittunnel

    @splittunnel.setter
    def splittunnel(self, splittunnel):
        """Sets the splittunnel of this OnboardResult.


        :param splittunnel: The splittunnel of this OnboardResult.  # noqa: E501
        :type: bool
        """
        if splittunnel is None:
            raise ValueError("Invalid value for `splittunnel`, must not be `None`")  # noqa: E501

        self._splittunnel = splittunnel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnboardResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnboardResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
